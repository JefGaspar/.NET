image: mcr.microsoft.com/dotnet/sdk:8.0

stages: [build, test]

variables:
  BUILD_CONFIGURATION: "Release"
  TEST_RESULTS_DIR: "Tests/TestResults"
  JUNIT_FILE: "Tests/TestResults/TestResults.xml"
  COVERAGE_OUT: "coverage/coverage.cobertura.xml"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .nuget/packages/
  policy: pull-push

build:
  stage: build
  script:
    - dotnet restore
    - dotnet build EventManager.sln -c $BUILD_CONFIGURATION --no-restore
  artifacts:
    expire_in: 1 day
    paths:
      - ./**/bin/
      - ./**/obj/

test:
  stage: test
  script:
    - mkdir -p Tests/TestResults
    - >
      dotnet test EventManager.sln --no-build -c $BUILD_CONFIGURATION \
        --logger "junit;LogFilePath=Tests/TestResults/TestResults.xml;MethodFormat=Class;FailureBodyFormat=Verbose" \
        --collect:"XPlat Code Coverage" \
        --results-directory Tests/TestResults
    # Cobertura naar vast pad voor GitLab
    - COV=$(find "$TEST_RESULTS_DIR" -type f -name "coverage.cobertura.xml" | head -n 1 || true)
    - if [ -n "$COV" ]; then mkdir -p coverage; cp "$COV" "$COVERAGE_OUT"; fi
    # HTML coverage
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - export PATH="$PATH:/root/.dotnet/tools"
    - if [ -f "$COVERAGE_OUT" ]; then reportgenerator -reports:"$COVERAGE_OUT" -targetdir:"coveragereport" -reporttypes:Html; fi
    # Percentage tonen in pipeline header
    - if [ -f "$COVERAGE_OUT" ]; then echo "TOTAL_COVERAGE=$(grep -oPm1 'line-rate=\"\\K[0-9.]+' "$COVERAGE_OUT" | awk '{printf "%.2f", $1*100}')%"; fi
  coverage: '/TOTAL_COVERAGE=(\d+\.\d+)%/'
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - Tests/TestResults/
      - coveragereport/
    reports:
      junit: Tests/TestResults/TestResults.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.cobertura.xml